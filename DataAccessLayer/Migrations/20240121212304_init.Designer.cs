// <auto-generated />
using System;
using System.Collections.Generic;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240121212304_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Concrete.DiseaseHistory", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Explonation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientUId")
                        .HasColumnType("uuid");

                    b.HasKey("UId");

                    b.HasIndex("PatientUId");

                    b.ToTable("DiseaseHistories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.DrugHistory", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("DoctorComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientUId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UId");

                    b.HasIndex("PatientUId");

                    b.ToTable("DrugHistories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Hospital", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coordinate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("EntityLayer.Concrete.IrregularVisitHistory", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BloadSituation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DoctorComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EWL")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Img")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientUId")
                        .HasColumnType("uuid");

                    b.Property<int>("VKI")
                        .HasColumnType("integer");

                    b.HasKey("UId");

                    b.HasIndex("PatientUId");

                    b.ToTable("IrregularVisitHistories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.LoginAttempt", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ResetTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UId");

                    b.ToTable("LoginAttempts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Organization", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Patient", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("BMI")
                        .HasColumnType("integer");

                    b.Property<int>("BodyMassIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("UId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PeriodicVisitHistory", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BloadSituation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EWL")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Img")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientUId")
                        .HasColumnType("uuid");

                    b.Property<int>("VKI")
                        .HasColumnType("integer");

                    b.HasKey("UId");

                    b.HasIndex("PatientUId");

                    b.ToTable("PeriodicVisitHistories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PostOp", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<List<string>>("ConsultedMedications")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("DoctorComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Drenaj")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientUId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("SupplimentedMedications")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("SurgeryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SurgeryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UId");

                    b.HasIndex("PatientUId");

                    b.ToTable("PostOps");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PreOp", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<List<string>>("AssistantDoctors")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("ConsultedSurgeryTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientUId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("SupplimentedSurgeryTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("SurgeryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SurgeryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetWeight")
                        .HasColumnType("integer");

                    b.HasKey("UId");

                    b.HasIndex("PatientUId");

                    b.ToTable("PreOps");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Session", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SurgeryHistory", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DoctorComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientUId")
                        .HasColumnType("uuid");

                    b.HasKey("UId");

                    b.HasIndex("PatientUId");

                    b.ToTable("SurgeryHistories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.Property<Guid>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserImage")
                        .HasColumnType("text");

                    b.Property<int>("UserStatusEnum")
                        .HasColumnType("integer");

                    b.HasKey("UId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.DiseaseHistory", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Patient", "Patient")
                        .WithMany("DiseaseHistory")
                        .HasForeignKey("PatientUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EntityLayer.Concrete.DrugHistory", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Patient", "Patient")
                        .WithMany("DrugHistory")
                        .HasForeignKey("PatientUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EntityLayer.Concrete.IrregularVisitHistory", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Patient", "Patient")
                        .WithMany("IrregularVisitHistory")
                        .HasForeignKey("PatientUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PeriodicVisitHistory", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Patient", "Patient")
                        .WithMany("PeriodicVisitHistory")
                        .HasForeignKey("PatientUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PostOp", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Patient", "Patient")
                        .WithMany("PostOps")
                        .HasForeignKey("PatientUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PreOp", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Patient", "Patient")
                        .WithMany("PreOps")
                        .HasForeignKey("PatientUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SurgeryHistory", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Patient", "Patient")
                        .WithMany("SurgeryHistory")
                        .HasForeignKey("PatientUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Patient", b =>
                {
                    b.Navigation("DiseaseHistory");

                    b.Navigation("DrugHistory");

                    b.Navigation("IrregularVisitHistory");

                    b.Navigation("PeriodicVisitHistory");

                    b.Navigation("PostOps");

                    b.Navigation("PreOps");

                    b.Navigation("SurgeryHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
